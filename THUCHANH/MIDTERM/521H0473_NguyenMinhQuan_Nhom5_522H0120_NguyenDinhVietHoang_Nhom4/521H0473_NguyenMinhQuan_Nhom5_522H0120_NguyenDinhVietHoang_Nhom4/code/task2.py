# -*- coding: utf-8 -*-
"""task2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rS1ReWybtLRApKMeSEmNdqhM1eYR5Ko3

Overfitting classification
"""

#import thư viện
import warnings
warnings.filterwarnings("ignore")
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.metrics import confusion_matrix, precision_score,recall_score, accuracy_score, mean_squared_error, r2_score
from sklearn.tree import DecisionTreeRegressor

# Đọc dữ liệu từ file fruit.csv
df = pd.read_csv('data/fruit.csv')
# Hiển thị ngẫu nhiên 10 mẫu dữ liệu từ tập dữ liệu
df.sample(10)

# Lấy các cột từ 3 đến 5 làm biến độc lập X.
X = df.iloc[:,3:6].values
# Lấy cột đầu tiên trong tập dữ liệu làm biến phụ thuộc Y.
Y = df.iloc[:,0].values
#In X và Y.
print(X)
print(Y)

# Chia dataset thành 2 phần: tập huấn luyện (X_train, y_train) và tập kiểm tra (X_test, y_test).
#test_size=0.2 chỉ định tỷ lệ tập kiểm thử so với tổng số dữ liệu. Trong trường hợp này, tập kiểm thử chiếm 20% tổng số dữ liệu.
#random_state = 0: xác định seed cho việc tạo ngẫu nhiên các tập dữ liệu. Sử dụng cùng một seed giúp đảm bảo rằng việc chia dữ liệu sẽ giống nhau mỗi khi chạy lại.
X_train,X_test, y_train, y_test = train_test_split(X,Y,test_size = 0.2,random_state = 0)

# Tạo model decision tree classification với min_samples_split là 2
# min_samples_split = 2: Tham số này xác định số lượng mẫu dữ liệu tối thiểu cần thiết để tiếp tục chia một nút.
# Ở đây, giá trị được đặt là 2, có nghĩa là mỗi nút cần ít nhất 2 mẫu dữ liệu để có thể chia thành các nút con.
clf_2 = tree.DecisionTreeClassifier(min_samples_split = 2)

#Huấn luyện mô hình trên tập huấn luyện
clf_2.fit(X_train, y_train)

#Dự đoán nhãn của tập kiểm tra
pred_2 = clf_2.predict(X_test)
#In nhãn của tập kiểm tra ra màn hình
print(pred_2)

#Dự đoán nhãn của tập huấn luyện
pred_train = clf_2.predict(X_train)
#In nhãn của tập huấn luyện ra màn hình
print(pred_train)

#In ra màn hình độ chính xác của tập dữ liệu huấn luyện và kiểm tra
print("Accuracy score on test data",accuracy_score(y_test,pred_2))
print("Accuracy score on training data",accuracy_score(y_train,pred_train))

"""Overfitting regression"""
# import warnings
# warnings.filterwarnings("ignore")
# import matplotlib.pyplot as plt
# import numpy as np
# import matplotlib.pyplot as plt
# import pandas as pd

# Đọc dữ liệu từ file fruit.csv
df = pd.read_csv('data/fruit.csv')
# Hiển thị ngẫu nhiên 10 mẫu dữ liệu từ tập dữ liệu
df.sample(10)
# Lấy các cột từ 3 đến 5 làm biến độc lập X.
X = df.iloc[:, 3:6].values
# Lấy cột đầu tiên trong tập dữ liệu làm biến phụ thuộc Y.
Y = df.iloc[:, 0].values
#In X và Y.
print(X)
print(Y)
# from sklearn.model_selection import train_test_split
# Chia dataset thành 2 phần: tập huấn luyện (X_train, y_train) và tập kiểm tra (X_test, y_test).
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)
# Tạo model decision tree regression với min_samples_split là 2
# min_samples_split = 2: Tham số này xác định số lượng mẫu dữ liệu tối thiểu cần thiết để tiếp tục chia một nút.
# Ở đây, giá trị được đặt là 2, có nghĩa là mỗi nút cần ít nhất 2 mẫu dữ liệu để có thể chia thành các nút con.
reg_2 = DecisionTreeRegressor(min_samples_split=2)
#Huấn luyện mô hình trên tập huấn luyện
reg_2.fit(X_train, y_train)
#Dự đoán nhãn của tập kiểm tra
pred_2 = reg_2.predict(X_test)
#In nhãn của tập kiểm tra ra màn hình
print(pred_2)
#Dự đoán nhãn của tập huấn luyện
pred_train = reg_2.predict(X_train)
#In nhãn của tập huấn luyện ra màn hình
print(pred_train)

#y_test là các giá trị thực của biến mục tiêu (ground truth) trong tập kiểm tra.
#pred_2 là các giá trị dự đoán của biến mục tiêu từ mô hình trên tập kiểm tra.
#MSE dùng để tính độ sai số giữa các giá trị dự đoán và các giá trị thực.
# Giá trị MSE càng thấp thì mô hình càng tốt.
mse_2 = mean_squared_error(y_test, pred_2)
# R-squared Score dùng để đánh giá khả năng giải thích biến thiên của mô hình.
#Giá trị R-squared Score càng gần 1 thì mô hình càng tốt.
r2_2 = r2_score(y_test, pred_2)
#In ra màn hình
print("Mean Squared Error (Test Set):", mse_2)
print("R-squared Score (Test Set):", r2_2)

#Tương tự phía trên
mse_train = mean_squared_error(y_train, pred_train)
r2_train = r2_score(y_train, pred_train)

print("Mean Squared Error (Training Set):", mse_train)
print("R-squared Score (Training Set):", r2_train)
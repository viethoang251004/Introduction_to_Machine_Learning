# -*- coding: utf-8 -*-
"""task1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jo16meIXg3WIr5N_Kx5oZuyrR7qtqdUM

Classification
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import MinMaxScaler
from warnings import filterwarnings
from sklearn.metrics import accuracy_score,confusion_matrix
filterwarnings(action='ignore')

"""Load data"""

wine = pd.read_csv("data/winequality-red.csv")
wine.sample(15)

wine.info()

wine.describe()

wine.isnull().sum()

wine.groupby('quality').mean()

"""Data visualization"""

wine.hist(figsize=(10,10),bins=50)
plt.show()

"""Data normalization"""

wine['quality'].unique()

wine['goodquality'] = [1 if x >=7 else 0 for x in wine['quality']]
wine.sample(5)

df = wine.values
X = wine.values[:,:-1]
Y = wine.values[:,-1]

scaler = MinMaxScaler()
scaler.fit(X)
X_scaled = scaler.fit_transform(X)
print(df)

"""Data preparing for Machine learning modeling"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,random_state=7, test_size=0.2)

model_res=pd.DataFrame(columns=['Model','Score'])

"""Training"""

# def deploy_logistic_classifier(model, X_test):
#     y_pred = model.predict(X_test)
#     model_res.loc[len(model_res)] = ['LogisticRegression', accuracy_score(Y_test,y_pred)]
#     print("Predict (Logistic Classifier):", y_pred)
#     print(classification_report(Y_test, y_pred))

def deploy_svm_classifier(model, X_test):
    y_pred = model.predict(X_test)
    model_res.loc[len(model_res)] = ['SVM Classifier', accuracy_score(Y_test,y_pred)]
    print("Predict (SVM Classifier):", y_pred)
    print(classification_report(Y_test, y_pred))

def deploy_neural_network_classifier(model, X_test):
    y_pred = model.predict(X_test)
    model_res.loc[len(model_res)] = ['Neural Network Classifier', accuracy_score(Y_test,y_pred)]
    print("Predict (Neural Network Classifier):", y_pred)
    print(classification_report(Y_test, y_pred))

"""Prediction and Evaluation"""

model_logistic = LogisticRegression()
model_logistic.fit(X_train, Y_train)
# deploy_logistic_classifier(model_logistic, X_test)
print(model_res)

model_svm = SVC()
model_svm.fit(X_train, Y_train)
deploy_svm_classifier(model_svm, X_test)
print(model_res)

model_neural_network = MLPClassifier()
model_neural_network.fit(X_train, Y_train)
deploy_neural_network_classifier(model_neural_network, X_test)
print(model_res)

model_res = model_res.sort_values(by='Score',ascending=False)
print(model_res)

# def deploy_logistic_classifier(model, X_test):
#     y_pred = model.predict(X_test)
#     y_proba = model.predict_proba(X_test)
#     model_res.loc[len(model_res)] = ['LogisticRegression', accuracy_score(Y_test,y_pred)]
#     print("Predict (Logistic Classifier):", y_pred)
#     print("Probability (Logistic Classifier):", y_proba)
#     print(classification_report(Y_test, y_pred))

# Huấn luyện mô hình logistic regression
# model_logistic = LogisticRegression()
# model_logistic.fit(X_train, Y_train)

# # Dự đoán xác suất trên tập kiểm tra
# probabilities = model_logistic.predict_proba(X_test)

# # In ra xác suất dự đoán cho các mẫu trong tập kiểm tra
# for prob in probabilities:
#     print("Probability of class 0:", prob[0])
#     print("Probability of class 1:", prob[1])
#     print()

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
def deploy_logistic_classifier(model, X_test):
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)
    model_res.loc[len(model_res)] = ['LogisticRegression', accuracy_score(Y_test, y_pred)]
    print("Predict (Logistic Classifier):", y_pred)
    print("Probability (Logistic Classifier):", y_proba)
    print(classification_report(Y_test, y_pred))

model_logistic = LogisticRegression()
model_logistic.fit(X_train, Y_train)
deploy_logistic_classifier(model_logistic, X_test)